version: '3.8'

x-base-service: &base_service
  networks:
    - etube

x-base-backend-client: &base_backend_client
  <<: *base_service
  build: ./backend/client
  container_name: backend-client
  env_file: .env
  volumes:
    - ./backend/client:/opt/app
  expose:
    - ${CLIENT_APP_PORT}
  healthcheck:
    test: curl http://x-base-backend-client:${CLIENT_APP_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
    interval: 30s
    timeout: 10s
    retries: 5

x-redis: &base_redis
  <<: *base_service
  image: redis:7.0-alpine
  container_name: redis
  restart: unless-stopped
  ports:
    - ${REDIS_PORT}:6379
  healthcheck:
    test: ["CMD", "redis-cli","ping"]
    interval: 30s
    timeout: 10s
    retries: 5

x-elasticsearch: &base_elasticsearch
  <<: *base_service
  image: docker.io/elastic/elasticsearch:8.2.0
  container_name: elasticsearch
  env_file: .env
  ports:
    - ${ES_PORT}:9200
  environment:
    - discovery.type=single-node
    - xpack.security.enabled=false
    - ELASTIC_USERNAME=${ES_USER}
    - ELASTIC_PASSWORD=${ES_PASSWORD}
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  healthcheck:
    test: curl ${ES_PROTOCOL}://x-elasticsearch:${ES_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
    interval: 30s
    timeout: 10s
    retries: 5

x-es-initer: &base_es_initer
  <<: *base_service
  build: ./backend/es_initer
  container_name: es-initer
  env_file: .env


services:

  backend-admin: 
    <<: *base_service
    build: ./backend/admin
    container_name: backend-admin
    env_file: .env
    profiles: 
      - dev
    volumes:
      - ./backend/admin:/opt/app
      - ./backend/admin/static:/var/www/static:ro
    expose:
      - ${ADMIN_APP_PORT}

  backend-client:
    <<: *base_backend_client
    profiles: 
      - dev
    depends_on:
      es-initer:
        condition: service_completed_successfully
    
  backend-client-test:
    <<: *base_backend_client
    profiles: 
      - test
    depends_on:
      es-initer-test:
        condition: service_completed_successfully
    ports:
      - ${CLIENT_APP_PORT}:${CLIENT_APP_PORT}

  nginx:
    <<: *base_service
    image: nginx:1.23.1-alpine
    container_name: nginx
    profiles: 
      - dev
    volumes:
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/nginx/configs:/etc/nginx/conf.d:ro
      - ./backend/nginx/static/errors:/var/www/errors/:ro
      - ./backend/admin/static:/var/www/static:ro
      - ./backend/nginx/static/log/access_log:/var/log/nginx/access.log:rw
      - ./backend/nginx/static/log/error_log:/var/log/nginx/error.log:rw
    depends_on:
      backend-client:
        condition: service_healthy
    ports:
      - ${ADMIN_APP_PORT}:${ADMIN_APP_PORT}
      - ${CLIENT_APP_PORT}:${CLIENT_APP_PORT}

  db:
    <<: *base_service
    image: postgres:13-alpine
    container_name: db
    env_file: .env
    profiles: 
      - dev
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - ${DB_PORT}:5432
    restart: unless-stopped
    volumes:
      - etube-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${DB_USER} -D ${DB_NAME} > /dev/null; if [[ $$? == 0 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    <<: *base_redis
    profiles:
      - dev
    volumes:
      - etube-redis-data:/data

  redis-test:
    <<: *base_redis
    profiles:
      - test
    volumes:
      - etube-redis-data-test:/data

  elasticsearch:
    <<: *base_elasticsearch
    profiles:
      - dev
    volumes:
      - etube-elasticsearch-data:/usr/share/elasticsearch/data:rw

  elasticsearch-test:
    <<: *base_elasticsearch
    profiles:
      - test
    volumes:
      - etube-elasticsearch-data-test:/usr/share/elasticsearch/data:rw

  kibana:
    <<: *base_service
    container_name: kibana
    image: docker.io/elastic/kibana:8.2.0
    environment:
      - ELASTICSEARCH_HOSTS=${ES_PROTOCOL}://${ES_USER}:${ES_PASSWORD}@elasticsearch:${ES_PORT}
    profiles:
      - test
    depends_on:
      - elasticsearch-test
    ports:
      - ${KIBANA_PORT}:5601

  etl:
    <<: *base_service
    build: ./backend/postgres_to_es
    container_name: etl
    restart: unless-stopped
    profiles: 
      - dev
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env

  es-initer:
    <<: *base_es_initer
    profiles: 
      - dev
    volumes:
      - ./backend/es_initer/mapping:/opt/es_initer/mapping:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    
  es-initer-test:
    <<: *base_es_initer
    profiles: 
      - test
    volumes:
      - ./backend/es_initer/mapping:/opt/es_initer/mapping:ro
    depends_on:
      elasticsearch-test:
        condition: service_healthy
    
  tests:
    <<: *base_service
    build: ./backend/tests
    container_name: tests
    profiles:
      - test
    depends_on:
      backend-client-test:
        condition: service_healthy
      es-initer-test:
        condition: service_completed_successfully
    env_file: .env

  auth:
    <<: *base_service
    build: ./backend/auth/restful
    container_name: auth
    volumes:
    - ./backend/auth/restful:/opt/app
    profiles: 
      - dev_auth
    env_file: .env
    ports:
      - ${AUTH_APP_PORT}:${AUTH_APP_PORT}
    # expose:
    #   - ${AUTH_APP_PORT}

  grpc-auth:
    <<: *base_service
    build: ./backend/auth/grpc
    container_name: grpc_auth
    volumes:
    - ./backend/auth/grpc:/opt/grpc
    profiles: 
      - dev_auth
    env_file: .env
    ports:
      - ${AUTH_GRPC_PORT}:${AUTH_GRPC_PORT}
    # expose:
    #   - ${AUTH_APP_PORT}


networks:
  etube:
    driver: bridge
  

volumes:
  etube-postgres-data:
  etube-elasticsearch-data:
  etube-elasticsearch-data-test:
  etube-redis-data:
  etube-redis-data-test: